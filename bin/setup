#!/bin/bash

#set -x

cd ../src || exit

printf "Setting up Supabase...\n"

git clone --depth 1 https://github.com/supabase/supabase

cd supabase/docker || exit

# Copy the fake env vars
cp .env.example .env

# Pull the latest images
sudo docker compose pull

#Secure services

if [[ ! -f .env ]]; then
    echo "Could not locate src/supabase/docker/.env"
    exit 1
fi

printf "Securing Supabase: Updating default config.\n"

while true; do
    read -r -p "Enter JWT secret or auto-generate? (enter/autogen): " user_choice

    case $user_choice in
    "enter")
        echo "Please enter JWT secret:"
        read -r jwt_secret
        break
        ;;
    "autogen")
        printf "Auto-generating JWT secret...\n"
        jwt_secret=$(openssl rand -base64 32)
        break
        ;;
    *)
        echo "Invalid choice! Please try again."
        ;;
    esac
done

source "../../../config"

anon_key=$(python3 "$BASE_PATH/bin/generate_anon_key.py" "$jwt_secret")

service_role_key=$(python3 "$BASE_PATH/bin/generate_service_role_key.py" "$jwt_secret")

printf "Enter Database password\n"
read -r db_password

printf "Enter Supabase Dashboard Username\n"
read -r dashboard_username

printf "Enter Supabase Dashboard Password\n"
read -r dashboard_password

printf "Enter Site URL\n"
read -r site_url

printf "Securing services: Updating supabase/docker/.env\n"

ENV_FILE="./.env"

# Declare an associative array with the key-value pairs you're interested in
declare -A key_values=(
    ["JWT_SECRET"]=$jwt_secret
    ["ANON_KEY"]=$anon_key
    ["SERVICE_ROLE_KEY"]=$service_role_key
    ["POSTGRES_PASSWORD"]=$db_password
    ["DASHBOARD_USERNAME"]=$dashboard_username
    ["DASHBOARD_PASSWORD"]=$dashboard_password
    #["SITE_URL"]=$site_url
    ["API_EXTERNAL_URL"]=$site_url
    ["SUPABASE_PUBLIC_URL"]=$site_url
)

# Iterate through the keys in the associative array
for key in "${!key_values[@]}"; do
    # Check if the key exists in the .env file
    if grep -q "^$key=" "$ENV_FILE"; then
        # If it does, replace its value
        sed -i "s|^$key=.*|$key=${key_values[$key]}|" "$ENV_FILE"
    else
        # Otherwise, append the key-value pair to the .env file
        echo "$key=${key_values[$key]}" >>"$ENV_FILE"
    fi
done

printf "Services secured. Starting services...\n"

printf "Setup Complete\n"

exit 0
